class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int count = 0;
        int row = grid.size(); int clos = grid[0].size();
        queue<pair<int,int>> p;
        for(int i = 0;i<row;i++)
        {
            for(int j =0;j<clos;j++)
            if(grid[i][j] == 2)
            p.push({i,j});
            else if(grid[i][j] == 1)
            count++;
        }
        vector<pair<int,int>> dir = {{0,1},{1,0},{0,-1},{-1,0}};
        int min = 0;
        while(count>0&&!p.empty())
        {
            min++;
            int n = p.size();
            for(int z = 1;z<=n;z++)
            {
                pair<int,int> q = p.front();
                p.pop();
                for(int k = 0;k<4;k++)
                {
                    int x = q.first + dir[k].first;
                    int y = q.second + dir[k].second;
                    if(x>=0&&x<row&&y>=0&&y<clos)
                    {
                        if(grid[x][y] == 1)
                        {
                            grid[x][y] = 2;
                            p.push({x,y});
                            count--;
                        }
                    }
                }
            }
        }
        return count?-1:min;
    }
};
