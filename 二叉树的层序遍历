*有三种解法，其中两种递归没有太大的区别，第二种递归效率较高，第三种解法是利用队列进行迭代*

递归：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<vector<int>> res;
    void dfs(TreeNode* node,int depth)
    {
        res[depth].push_back(node->val);
        if(node->left) dfs(node->left,depth+1);
        if(node->right) dfs(node->right,depth+1);
    }
    int depth(TreeNode *node)
    {
        if(!node) return 0;
        return max(depth(node->left),depth(node->right))+1;
    }
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root == 0) return res;
        int n = depth(root);
        res.resize(n);
        dfs(root,0);
        return res;
    }
};

第二种递归（比第一种好）：
class Solution {
    vector<vector<int>> res;
    void dfs(TreeNode *node,int depth)
    {
        if(node)
        {
            if(res.size()<=depth)
            {
                res.push_back(vector<int>());
            }
            res[depth].push_back(node->val);
        }
        else return;
        dfs(node->left,depth+1);
        dfs(node->right,depth+1);
    }
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root) return res;
        dfs(root,0);
        return res;
    }
};

利用队列进行迭代：
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        queue<TreeNode *> myqueue;
        myqueue.push(root);
        while(!myqueue.empty())
        {
            vector<int> cur;
            for(int i = myqueue.size();i>0;i--)
            {
                TreeNode *temp = myqueue.front();
                cur.push_back(temp->val);
                myqueue.pop();
                if(temp->left) myqueue.push(temp->left);
                if(temp->right) myqueue.push(temp->right);
            }
            if(!cur.empty())
            res.push_back(cur);
        }
        return res;
    }
};
