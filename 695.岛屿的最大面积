

class Solution {
    int dfs(vector<vector<int>>& grid, int row, int clos) {
        if (row < 0 || clos < 0 || row == grid.size() || clos == grid[0].size() || grid[row][clos] != 1)
            return 0;
        grid[row][clos] = 0;
        int di[4] = {0, 0, 1, -1};
        int dj[4] = {1, -1, 0, 0};
        int ans = 1;
        for (int index = 0; index != 4; ++index) {
            int next_i = row + di[index], next_j = clos + dj[index];
            ans += dfs(grid, next_i, next_j);
        }
        return ans;
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i != grid.size(); ++i)
            for (int j = 0; j != grid[0].size(); ++j)
                ans = max(ans, dfs(grid, i, j));
        return ans;
    }
};
