利用层序遍历，将每一层的最后一个元素添加到数组中。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<int> res;
    vector<vector<int>> temp;
    void dfs(TreeNode *node,int depth)
    {
        if(node)
        {
            if(temp.size()<=depth)
            {
                temp.push_back(vector<int>());
            }
            temp[depth].push_back(node->val);
        }
        else return;
        dfs(node->left,depth+1);
        dfs(node->right,depth+1);
    }
public:
    vector<int> rightSideView(TreeNode* root) {
        if(root == NULL) return res;
        dfs(root,0);
        for(int i = 0;i<temp.size();i++)
        {
            int j=temp[i].size();
            res.push_back(temp[i][j-1]);
        }
        return res;
    }
};
第二种方法，一层一层的遍历加判断，效率较高：
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        queue<TreeNode *> myqueue;
        myqueue.push(root);
        while(!myqueue.empty())
        {          
            int n = myqueue.size();      
            for(int i = 1;i<=n;i++)
            {
                TreeNode *p = myqueue.front();
                myqueue.pop();
                if(i == n) 
                res.push_back(p->val);
                if(p->left) myqueue.push(p->left);
                if(p->right) myqueue.push(p->right);
            }
        }
        return res;
    }
};
